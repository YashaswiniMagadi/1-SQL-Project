Stored Procedures:

________________________________________________________________________________________________________________________________
1. get_forecast_accuracy 

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_forecast_accuracy`(
        	in_fiscal_year INT
	)
BEGIN
		with forecast_err_table as (
             	       select
                           s.customer_code as customer_code,
                           c.customer as customer_name,
                           c.market as market,
                           sum(s.sold_quantity) as total_sold_qty,
                           sum(s.forecast_quantity) as total_forecast_qty,
                           sum(s.forecast_quantity-s.sold_quantity) as net_error,
                           round(sum(s.forecast_quantity-s.sold_quantity)*100/sum(s.forecast_quantity),1) as net_error_pct,
                           sum(abs(s.forecast_quantity-s.sold_quantity)) as abs_error,
                           round(sum(abs(s.forecast_quantity-sold_quantity))*100/sum(s.forecast_quantity),2) as abs_error_pct
             	       from fact_act_est s
             	       join dim_customer c
                       on s.customer_code = c.customer_code
                       where s.fiscal_year=in_fiscal_year
                       group by customer_code
	        )
	        select 
                    *,
                    if (abs_error_pct > 100, 0, 100.0 - abs_error_pct) as forecast_accuracy
	        from forecast_err_table
                order by forecast_accuracy desc;
	END

________________________________________________________________________________________________________________________________
2. get_monthly_gross_sales_for_customer

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_monthly_gross_sales_for_customer`(
in_customer_code TEXT,fiscal_year INT
)
BEGIN
	select s.date,
    SUM(ROUND(s.sold_quantity*g.gross_price,2)) as total_gross_price
 from fact_sales_monthly s
 join dim_product p 
 ON p.product_code=s.product_code
 join fact_gross_price g
 on g.product_code=s.product_code and g.fiscal_year=get_fiscal_year(s.date)
 where FIND_IN_SET(s.customer_code,in_customer_code)>0
  and get_fiscal_year(s.date)= fiscal_year
  group by s.date
  order by s.date;
END

________________________________________________________________________________________________________________________________
3. get_top_n_products_per_division_by_qty_sold

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_top_n_products_per_division_by_qty_sold`(
        	in_fiscal_year INT,
    		in_top_n INT
	)
BEGIN
	     with cte1 as (
		   select
                       p.division,
                       p.product,
                       sum(sold_quantity) as total_qty
                   from fact_sales_monthly s
                   join dim_product p
                       on p.product_code=s.product_code
                   where fiscal_year=in_fiscal_year
                   group by p.product,p.division),            
             cte2 as (
		   select 
                        *,
                        dense_rank() over (partition by division order by total_qty desc) as drnk
                   from cte1)
	     select * from cte2 where drnk <= in_top_n;
	END


________________________________________________________________________________________________________________________________
4. market_badge

CREATE DEFINER=`root`@`localhost` PROCEDURE `market_badge`(
IN in_fiscal_year year,
IN in_market VARCHAR(30),
OUT out_badge VARCHAR(30)
)
BEGIN
Declare qty int default 0;
IF in_market ="" then 
  set in_market ="India";
End If;

select SUM(sold_quantity) into qty  
 from fact_sales_monthly s
join dim_customer c
ON s.customer_code=c.customer_code
where 
   get_fiscal_year(s.date) = in_fiscal_year
   and c.market=in_market
   group by c.market;
   
   
   if qty>5000000 then 
   set out_badge ="Gold";
   else
   set out_badge="Silver";
   end if;
   
END
________________________________________________________________________________________________________________________________
5. netSales_by_region 

CREATE DEFINER=`root`@`localhost` PROCEDURE `netSales_by_region`(
in_fiscal_year INT,
in_region VARCHAR(30))
BEGIN
with cte1 as (SELECT c.customer,
round(sum(net_sales)/1000000,2) as net_sales_in_millions
 FROM gdb0041.net_sales s
 JOIN dim_customer c
 ON s.customer_code=c.customer_code
 where s.fiscal_year=in_fiscal_year and c.region=in_region
 group by c.customer
 order by net_sales_in_millions desc)
 select *,
 net_sales_in_millions*100/sum(net_sales_in_millions) over () as pct from cte1;
END
________________________________________________________________________________________________________________________________
6. top_n_customers_by_net_sales

CREATE DEFINER=`root`@`localhost` PROCEDURE `top_n_customers_by_net_sales`(
in_fiscal_year INT,
in_market Varchar(45),
in_top_n INT)
BEGIN
SELECT c.customer,
round(sum(net_sales)/1000000,2) as net_sales_in_millions
 FROM gdb0041.net_sales s
 JOIN dim_customer c
 ON s.customer_code=c.customer_code
 where s.fiscal_year=in_fiscal_year and s.market =in_market
 group by c.customer
 order by net_sales_in_millions desc
 limit in_top_n;
END
________________________________________________________________________________________________________________________________
7. top_n_market_by_net_sales

CREATE DEFINER=`root`@`localhost` PROCEDURE `top_n_market_by_net_sales`(
in_fiscal_year INT,
in_top_n INT)
BEGIN
SELECT s.market,
round(sum(s.net_sales)/1000000,2) as net_sales_in_millions
 FROM net_sales s
 where fiscal_year=in_fiscal_year
 group by market
 order by net_sales_in_millions desc
 limit in_top_n;
END

________________________________________________________________________________________________________________________________
8. top_n_products_by_net_sales

CREATE DEFINER=`root`@`localhost` PROCEDURE `top_n_products_by_net_sales`(
in_fiscal_year INT,
in_top_n INT)
BEGIN
SELECT s.product,
round(sum(net_sales)/1000000,2) as net_sales_in_millions
 FROM gdb0041.net_sales s
 where fiscal_year=in_fiscal_year
 group by s.product
 order by net_sales_in_millions desc
 limit in_top_n;
END



********************************** END **********************************